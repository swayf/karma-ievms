// Generated by CoffeeScript 1.7.1
var IEVMLauncher, iectrl, name, url, _fn, _i, _len, _ref;

iectrl = require('iectrl');

url = require('url');

IEVMLauncher = (function() {
  function IEVMLauncher(name, id, args) {
    this.name = name;
    this.id = id;
    this.args = args;
    this.vm = iectrl.IEVM.find(this.name)[0];
    this.wasRunning = false;
    this.captured = false;
  }

  IEVMLauncher.prototype.start = function(url) {
    var urlObj, vmUrl;
    vmUrl = ("" + url + "?id=" + this.id).replace('localhost', iectrl.IEVM.hostIp);
    urlObj = url.parse(vmUrl, true);
    if (this.args['x-ua-compatible']) {
      urlObj.query['x-ua-compatible'] = this.args['x-ua-compatible'];
    }
    delete urlObj.search;
    vmUrl = url.format(urlObj);
    return this.vm.running().then((function(_this) {
      return function(running) {
        _this.wasRunning = running;
        if (running) {
          return _this.vm.open(vmUrl);
        }
        return _this.vm.start(true).then(function() {
          return _this.vm.open(vmUrl);
        });
      };
    })(this));
  };

  IEVMLauncher.prototype.kill = function(done) {
    return this.vm.close().then((function(_this) {
      return function() {
        if (_this.wasRunning) {
          return done();
        }
        return _this.vm.stop().then(function() {
          return done();
        });
      };
    })(this));
  };

  IEVMLauncher.prototype.markCaptured = function() {
    return this.captured = true;
  };

  IEVMLauncher.prototype.isCaptured = function() {
    return this.captured;
  };

  return IEVMLauncher;

})();

_ref = iectrl.IEVM.names;
_fn = function(name) {
  var launcher;
  launcher = function(id, args) {
    return new IEVMLauncher(name, id, args);
  };
  launcher.$inject = ['id', 'args'];
  return exports["launcher:" + name] = ['type', launcher];
};
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  name = _ref[_i];
  _fn(name);
}
